//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Test Swipe Area/Touch.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Touch"",
    ""maps"": [
        {
            ""name"": ""TouchControls"",
            ""id"": ""081ba836-b8c8-4eaf-ad96-519ba335d94c"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""149cc84e-d50e-4cc1-bc5d-f4f67103c607"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouch2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5d663f8f-fdf1-4902-bc30-6ed2f734ddc8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swipe1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8705dbb5-fec5-4473-91dd-f977242b88b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swipe2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3cdde5d2-c9ff-4a96-9446-dca7eb0412d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1457908-76a9-4d87-90d2-c37d00f50ff8"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""863001ce-c5cc-4964-9018-4e11e1c8c426"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd92fffd-b06f-4cf1-b699-71a2d3c07c83"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""692da51a-4151-4d32-8b60-f1fd505c1556"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swipe2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchControls
        m_TouchControls = asset.FindActionMap("TouchControls", throwIfNotFound: true);
        m_TouchControls_PrimaryTouch1 = m_TouchControls.FindAction("PrimaryTouch1", throwIfNotFound: true);
        m_TouchControls_PrimaryTouch2 = m_TouchControls.FindAction("PrimaryTouch2", throwIfNotFound: true);
        m_TouchControls_Swipe1 = m_TouchControls.FindAction("Swipe1", throwIfNotFound: true);
        m_TouchControls_Swipe2 = m_TouchControls.FindAction("Swipe2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchControls
    private readonly InputActionMap m_TouchControls;
    private List<ITouchControlsActions> m_TouchControlsActionsCallbackInterfaces = new List<ITouchControlsActions>();
    private readonly InputAction m_TouchControls_PrimaryTouch1;
    private readonly InputAction m_TouchControls_PrimaryTouch2;
    private readonly InputAction m_TouchControls_Swipe1;
    private readonly InputAction m_TouchControls_Swipe2;
    public struct TouchControlsActions
    {
        private @TouchInput m_Wrapper;
        public TouchControlsActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouch1 => m_Wrapper.m_TouchControls_PrimaryTouch1;
        public InputAction @PrimaryTouch2 => m_Wrapper.m_TouchControls_PrimaryTouch2;
        public InputAction @Swipe1 => m_Wrapper.m_TouchControls_Swipe1;
        public InputAction @Swipe2 => m_Wrapper.m_TouchControls_Swipe2;
        public InputActionMap Get() { return m_Wrapper.m_TouchControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchControlsActions set) { return set.Get(); }
        public void AddCallbacks(ITouchControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Add(instance);
            @PrimaryTouch1.started += instance.OnPrimaryTouch1;
            @PrimaryTouch1.performed += instance.OnPrimaryTouch1;
            @PrimaryTouch1.canceled += instance.OnPrimaryTouch1;
            @PrimaryTouch2.started += instance.OnPrimaryTouch2;
            @PrimaryTouch2.performed += instance.OnPrimaryTouch2;
            @PrimaryTouch2.canceled += instance.OnPrimaryTouch2;
            @Swipe1.started += instance.OnSwipe1;
            @Swipe1.performed += instance.OnSwipe1;
            @Swipe1.canceled += instance.OnSwipe1;
            @Swipe2.started += instance.OnSwipe2;
            @Swipe2.performed += instance.OnSwipe2;
            @Swipe2.canceled += instance.OnSwipe2;
        }

        private void UnregisterCallbacks(ITouchControlsActions instance)
        {
            @PrimaryTouch1.started -= instance.OnPrimaryTouch1;
            @PrimaryTouch1.performed -= instance.OnPrimaryTouch1;
            @PrimaryTouch1.canceled -= instance.OnPrimaryTouch1;
            @PrimaryTouch2.started -= instance.OnPrimaryTouch2;
            @PrimaryTouch2.performed -= instance.OnPrimaryTouch2;
            @PrimaryTouch2.canceled -= instance.OnPrimaryTouch2;
            @Swipe1.started -= instance.OnSwipe1;
            @Swipe1.performed -= instance.OnSwipe1;
            @Swipe1.canceled -= instance.OnSwipe1;
            @Swipe2.started -= instance.OnSwipe2;
            @Swipe2.performed -= instance.OnSwipe2;
            @Swipe2.canceled -= instance.OnSwipe2;
        }

        public void RemoveCallbacks(ITouchControlsActions instance)
        {
            if (m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchControlsActions @TouchControls => new TouchControlsActions(this);
    public interface ITouchControlsActions
    {
        void OnPrimaryTouch1(InputAction.CallbackContext context);
        void OnPrimaryTouch2(InputAction.CallbackContext context);
        void OnSwipe1(InputAction.CallbackContext context);
        void OnSwipe2(InputAction.CallbackContext context);
    }
}
